//Map1

class Map1{

    field Array map;
    field int fakeCastleX, fakeCastleY;
    field int realCastleX, realCastleY;
    field int arrowX, arrowY;

    constructor Map1 new()
    {
        var int i, column;
        let realCastleX = 1 * 16;
        let realCastleY = (12 * 16 + 15);
        let fakeCastleX = 27 * 16;
        let fakeCastleY = (12 * 16 + 15);
        let arrowX = 13 * 16;
        let arrowY = 3 * 16 + 15;
        let i = 0;
        let map = Array.new(512);
        do Screen.clearScreen();
        
        while(i < (16 * 32))
        {
            let column = ( i - ((i / 32) * 32) );
            if(i < 13 * 32)
            {
                let map[i] = 0;
            }

            if(i > (13 * 32 - 1))
            {
                if( (column = 15) | (column = 16) )
                {
                    let map[i] = 2;
                }
                else
                {
                    let map[i] = 1;
                }
            }
            
            let i = i + 1;
        }
        let i = 0;
        while(i < 512)
        {
           do Drawblock(i, map[i]);
           let i = i + 1;
        }
        do drawCastle(fakeCastleX, fakeCastleY);
        do drawArrow();
        return this;
    }
    method void restart()
    {
        var int i, column;
        let realCastleX = 1 * 16;
        let realCastleY = (12 * 16 + 15);
        let fakeCastleX = 27 * 16;
        let fakeCastleY = (12 * 16 + 15);
        let arrowX = 13 * 16;
        let arrowY = 3 * 16 + 15;
        
        do Screen.clearScreen();
        let i = 0;
        while(i < (16 * 32))
        {
            let column = ( i - ((i / 32) * 32) );
            if(i < 13 * 32)
            {
                let map[i] = 0;
            }

            if(i > (13 * 32 - 1))
            {
                if( (column = 15) | (column = 16) )
                {
                    let map[i] = 2;
                }
                else
                {
                    let map[i] = 1;
                }
            }            
            let i = i + 1;
        }
        let i = 0;
        while(i < 512)
        {
           do Drawblock(i, map[i]);
           let i = i + 1;
        }
        do drawCastle(fakeCastleX, fakeCastleY);
        do drawArrow();
        return;
    }
    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }

    method void Drawblock(int i, int type)
    {
        var int x, y;
        let x = (i - (i / 32 * 32)) * 16;
        let y = (i / 32) * 16;

        if((type = 1) | (type = 2))
        {
            do Screen.setColor(true);
            do Screen.drawLine(x, y, x + 15, y);
            do Screen.drawLine(x, y + 8, x + 15, y + 8);
            do Screen.drawLine(x + 4, y, x + 4, y + 8);
            do Screen.drawLine(x + 10, y + 8, x + 10, y + 15);
        }
        return;
    }

    method void drawCastle(int castleX, int castleY)
    {
        do Screen.setColor(true);
        //GATE
        do Screen.drawRectangle(castleX + 22, castleY - 20, castleX + 42, castleY);
        do Screen.drawCircle(castleX + 32, castleY - 20, 10);
        //BOX
        do Screen.drawLine(castleX, castleY - 55, castleX + 63, castleY - 55);
        do Screen.drawLine(castleX, castleY - 55, castleX, castleY - 35);
        do Screen.drawLine(castleX, castleY - 35, castleX + 63, castleY - 35); 
        do Screen.drawLine(castleX + 63, castleY - 55, castleX + 63, castleY - 35);
        // EXIT
        do Screen.drawLine(castleX + 8, castleY - 52, castleX + 16, castleY - 52);
        do Screen.drawLine(castleX + 8, castleY - 46, castleX + 16, castleY - 46);
        do Screen.drawLine(castleX + 8, castleY - 38, castleX + 16, castleY - 38);
        do Screen.drawLine(castleX + 8, castleY - 52, castleX + 8, castleY - 38);
        do Screen.drawLine(castleX + 20, castleY - 52, castleX + 30, castleY - 38);
        do Screen.drawLine(castleX + 30, castleY - 52, castleX + 20, castleY - 38);
        do Screen.drawLine(castleX + 34, castleY - 52, castleX + 42, castleY - 52);
        do Screen.drawLine(castleX + 34, castleY - 38, castleX + 42, castleY - 38);
        do Screen.drawLine(castleX + 38, castleY - 52, castleX + 38, castleY - 38);
        do Screen.drawLine(castleX + 46, castleY - 52, castleX + 54, castleY - 52);
        do Screen.drawLine(castleX + 50, castleY - 52, castleX + 50, castleY - 38);
        return;
    }
    method void drawArrow()
    {
        do Screen.setColor(true);
        //arrow
        do Screen.drawLine(arrowX, arrowY - 8, arrowX, arrowY - 23);
        do Screen.drawLine(arrowX, arrowY - 8, arrowX + 47, arrowY - 8);
        do Screen.drawLine(arrowX, arrowY - 23, arrowX + 47, arrowY - 23);
        do Screen.drawLine(arrowX + 47, arrowY - 8, arrowX + 47, arrowY);
        do Screen.drawLine(arrowX + 47, arrowY - 23, arrowX + 47, arrowY - 31);
        do Screen.drawLine(arrowX + 47, arrowY, arrowX + 95, arrowY - 16);
        do Screen.drawLine(arrowX + 47, arrowY - 31, arrowX + 95, arrowY - 16);
        //face
        do Screen.drawLine(arrowX + 54, arrowY - 20, arrowX + 56, arrowY - 20);
        do Screen.drawLine(arrowX + 55, arrowY - 19, arrowX + 56, arrowY - 19);
        do Screen.drawLine(arrowX + 62, arrowY - 20, arrowX + 64, arrowY - 20);
        do Screen.drawLine(arrowX + 63, arrowY - 19, arrowX + 64, arrowY - 19);

        do Screen.drawLine(arrowX + 53, arrowY - 15, arrowX + 56, arrowY - 12);
        do Screen.drawLine(arrowX + 63, arrowY - 12, arrowX + 66, arrowY - 15);
        do Screen.drawLine(arrowX + 58, arrowY - 11, arrowX + 61, arrowY - 11);
        do Screen.drawPixel(arrowX + 57, arrowY - 12);
        do Screen.drawPixel(arrowX + 62, arrowY - 12);
        return;
    }
    method boolen onGround(int x, int y)
    {
        var int id;
        let x = x / 16;
        let y = (y + 1) / 16;
        let id = (y * 32 + x);
        if(map[id] = 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    method void fakeGround()
    {
        do Screen.setColor(false);
        do Screen.drawRectangle(15 * 16, 13 * 16, 16 * 16 + 15, 255);
        return;
    }
    method void fakeCastleDisapper()
    {
        do Screen.setColor(false);
        do Screen.drawRectangle(fakeCastleX, fakeCastleY - 55, fakeCastleX + 63, fakeCastleY - 35);
        do Screen.drawRectangle(fakeCastleX + 22, fakeCastleY - 30, fakeCastleX + 42, fakeCastleY);
        return;
    }
    method void screen2()
    {
        var int i;
        let i = 0;
        do Screen.clearScreen();
        while(i < 512)
        {
            if(i < 416)
            {
                let map[i] = 0;
            }
            else
            {
                let map[i] = 1;
            }

            let i = i + 1;
        }

        let i = 0;

        while(i < 512)
        {
           do Drawblock(i, map[i]);
           let i = i + 1;
        }

        do drawCastle(realCastleX, realCastleY);
        do drawQuote();
        return;
    }

    method boolean finished(int x, int y)
    {
        return( (x > (realCastleX + 4) ) & (y < (realCastleY + 1)) & ( x < (realCastleX + 46) ) & ( y > (realCastleY - 55) ) );
    }
    method boolean blockRight(int x, int y)
    {
        return( map[((y / 16) * 32) + ((x + 16) / 16)] = 1);
    }
    method boolean blockLeft(int x, int y)
    {
        return( map[((y / 16) * 32) + ((x - 1) / 16)] = 1);
    }
    method void drawQuote()
    {
        do Output.moveCursor(4, 30);
        do Output.printString("I'm a slow walker,");
        do Output.moveCursor(6, 31);
        do Output.printString(" but I never walk backwards.");
        return;
    }
}